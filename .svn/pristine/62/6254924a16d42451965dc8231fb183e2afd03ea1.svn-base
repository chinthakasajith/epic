/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.epic.cms.admin.controlpanel.systemconfigmgt.servlet;

import com.epic.cms.admin.controlpanel.systemconfigmgt.bean.StandingOrderTypesBean;
import com.epic.cms.admin.controlpanel.systemconfigmgt.businesslogic.StandingOrderTypesManager;
import com.epic.cms.admin.controlpanel.sysusermgt.bean.SystemAuditBean;
import com.epic.cms.admin.controlpanel.sysusermgt.businesslogic.SystemUserManager;
import com.epic.cms.system.util.exception.AccessDeniedException;
import com.epic.cms.system.util.exception.NewLoginSessionException;
import com.epic.cms.system.util.exception.SesssionExpException;
import com.epic.cms.system.util.session.SessionUser;
import com.epic.cms.system.util.session.SessionVarList;
import com.epic.cms.system.util.session.SessionVarName;
import com.epic.cms.system.util.validate.UserInputValidator;
import com.epic.cms.system.util.variable.ApplicationVarList;
import com.epic.cms.system.util.variable.MessageVarList;
import com.epic.cms.system.util.variable.OracleMessage;
import com.epic.cms.system.util.variable.PageVarList;
import com.epic.cms.system.util.variable.SectionVarList;
import com.epic.cms.system.util.variable.TaskVarList;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 *
 * @author asitha_l
 */
public class AddStandingOrderTypesServlet extends HttpServlet {
    
    private RequestDispatcher rd;
    HttpSession sessionObj = null;
    private Boolean successInsert;
    private List<String> userTaskList; 
    private String errorMessage = null;
    private SessionUser sessionUser = null;
    private SessionVarList sessionVarlist = null;
    private SystemAuditBean systemAuditBean = null;
    private SystemUserManager systemUserManager = null;
    //------------------------------------------------------ 
    private StandingOrderTypesBean standingOrderTypesBean;
    private String url = "/administrator/controlpanel/systemconfigmgt/standingordertypeshome.jsp";
    private StandingOrderTypesManager standingOrderTypesManager = null;
    private List<StandingOrderTypesBean> standingOrderList;

    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
            response.setContentType("text/html;charset=UTF-8");
        try {
            try {
                sessionObj = request.getSession(false);
                systemUserManager = new SystemUserManager();
                sessionVarlist = (SessionVarList) sessionObj.getAttribute(SessionVarName.SESSION_OBJ);
                sessionUser = sessionVarlist.getCMSSessionUser();

                //check system user is in same session or not
                try {

                    if (!systemUserManager.validateUserSession(sessionUser.getUserName(), sessionObj.getId())) {
                        //useer not in same session.
                        throw new NewLoginSessionException();

                    }

                } catch (NewLoginSessionException nlex) {
                    //throw lst login close exception
                    throw new NewLoginSessionException();
                }

            } catch (NullPointerException ex) {
                //throw session null exception
                throw new SesssionExpException();
            }

            try {
                //set page code and task codes
                String pageCode = PageVarList.STANDING_ORDER_TYPES;
                String taskCode = TaskVarList.ADD;


                //check whether userrole have an access for this page and task
                if (this.isValidAccess(sessionUser.getUserRole(), pageCode, taskCode)) {

                    try {
                        //assign user input to the bean
                        setUserInputToBean(request);
                        //if user inputs are valid
                        if (validateUserInput(standingOrderTypesBean)) {
                            request.setAttribute("operationtype", "add");
                            this.setAudittraceValue(request);
                            try {
                                successInsert = insertNewStandingOrderType(standingOrderTypesBean);
                                if (successInsert) {
                                    request.setAttribute("successMsg", MessageVarList.SUCCESS_ADD + "Standing Oreder ID '"+ standingOrderTypesBean.getOrderID()+"'");
                                } else {
                                    throw new Exception();
                                }

                            } catch (SQLException e) {
                                //show the messages which has thrown when inserting
                                OracleMessage message = new OracleMessage();
                                String oraMessage = message.getMessege(e.getMessage());
                                request.setAttribute("standingOrderTypesBean", standingOrderTypesBean);
                                request.setAttribute("addValidation", "fail");
                                request.setAttribute("errorMsg", oraMessage);
                            }
                            
                            this.getAllStandingOrderData();
                            request.setAttribute("standingOrderList", standingOrderList);
                            rd = getServletContext().getRequestDispatcher(url);

                        } else {
                            //if the user inputs are invalid go to the home page with an error message
                            this.getAllStandingOrderData();
                            request.setAttribute("standingOrderList", standingOrderList);
                            request.setAttribute("standingOrderTypesBean", standingOrderTypesBean);
                            request.setAttribute("errorMsg", errorMessage);
                            request.setAttribute("operationtype", "add");
                            request.setAttribute("addValidation", "fail");
                            rd = getServletContext().getRequestDispatcher(url);

                        }

                    } catch (Exception e) {
                        request.setAttribute("operationtype", "add");
                        request.setAttribute("addValidation", "fail");
                        request.setAttribute("errorMsg", MessageVarList.UNKNOW_ERROR);
                        request.setAttribute("standingOrderList", standingOrderList);
                        request.setAttribute("standingOrderTypesBean", standingOrderTypesBean);
                        rd = getServletContext().getRequestDispatcher(url);
                    }
                } else {

                    throw new AccessDeniedException();
                }
                //set tasks to the session
                sessionVarlist.setUserPageTaskList(userTaskList);
            } catch (AccessDeniedException adex) {
                //if user_role doesn't have required access to the page throw Access Denied exception
                throw adex;
            }

        } catch (SesssionExpException sex) {
            rd = getServletContext().getRequestDispatcher(MessageVarList.SESSION_EXPIRED_URL + MessageVarList.SESSION_EXPIRED);
        } catch (NewLoginSessionException nlex) {
            rd = getServletContext().getRequestDispatcher(MessageVarList.SESSION_EXPIRED_URL + MessageVarList.LAST_SESSION_CLOSE);
        } catch (AccessDeniedException adex) {
            rd = getServletContext().getRequestDispatcher(MessageVarList.SESSION_EXPIRED_URL + MessageVarList.ACCESS_DENIED_TASK);
        } catch (SQLException ex) {
            request.setAttribute(MessageVarList.JSP_ERROR, OracleMessage.getMessege(ex.getMessage()));
            rd = request.getRequestDispatcher(url);
        } catch (Exception ex) {
            request.setAttribute("operationtype", "add");
            request.setAttribute(MessageVarList.JSP_ERROR, MessageVarList.UNKNOW_ERROR);
            rd = request.getRequestDispatcher(url);
        } finally {
            rd.forward(request, response);
        }
    }
    
    /**
     * to check whether user has required access to the page
     * @param userrole
     * @param pagecode
     * @param task
     * @return
     * @throws Exception 
     */
    private boolean isValidAccess(String userrole, String pagecode, String task) throws Exception {

        boolean isValidTaskAccess = false;

        try {
            systemUserManager = new SystemUserManager();
            //get all tasks for userrole for this page
            userTaskList = systemUserManager.getTasksByPageCodeAndUserRole(userrole, pagecode);
            for (String usertask : userTaskList) {
                if (task.equals(usertask)) {
                    isValidTaskAccess = true;
                }
            }
            return isValidTaskAccess;
        } catch (Exception ex) {
            throw ex;
        }
    }
    
    /**
     * to set user input to the bean
     * @param request
     * @return
     * @throws Exception 
     */
    public Boolean setUserInputToBean(HttpServletRequest request) throws Exception {
        Boolean status = true;
        try {

            standingOrderTypesBean = new StandingOrderTypesBean();

            standingOrderTypesBean.setOrderID(request.getParameter("orderid"));
            standingOrderTypesBean.setOrderName(request.getParameter("orderName"));            
            standingOrderTypesBean.setFlatFee(request.getParameter("flatFee"));
            standingOrderTypesBean.setFlatFeePercentage(request.getParameter("percentage"));
            standingOrderTypesBean.setFeeOption(request.getParameter("feeOption"));
            standingOrderTypesBean.setCurrencyType(request.getParameter("currency"));
            standingOrderTypesBean.setMaxTransactionAmt(request.getParameter("maxTranAmt"));
            standingOrderTypesBean.setMinTransactionAmt(request.getParameter("minTranAmt"));
            standingOrderTypesBean.setStatus(request.getParameter("standingOrderStatus"));
            standingOrderTypesBean.setBankCode(request.getParameter("banks"));
            standingOrderTypesBean.setBranchCode(request.getParameter("branchNames"));
            standingOrderTypesBean.setAccNumber(request.getParameter("accNum"));
            standingOrderTypesBean.setPaymenyType(request.getParameter("paymentType"));
            standingOrderTypesBean.setAddress1(request.getParameter("address1"));
            standingOrderTypesBean.setAddress2(request.getParameter("address2"));
            standingOrderTypesBean.setCity(request.getParameter("city")); 
            standingOrderTypesBean.setContactPerson(request.getParameter("contactPerson"));
            standingOrderTypesBean.setContactNumber(request.getParameter("contactNo"));                              
            standingOrderTypesBean.setLastUpdatedUser(sessionUser.getUserName());

        } catch (Exception e) {
            status = false;
            throw e;

        }

        return status;
    }
    
    /**
     * validate user inputs
     * @param StandingOrderTypesBean
     * @return
     * @throws Exception 
     */
    public boolean validateUserInput(StandingOrderTypesBean bean) throws Exception {

        boolean isValidate = true;
        try {
            if (bean.getOrderID().contentEquals("") || bean.getOrderID().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_ID_NULL;
            }else if(!UserInputValidator.isAlphaNumeric(bean.getOrderID())) {
                isValidate = false;
                errorMessage = MessageVarList.INVALID_ORDER_ID;
            }else if (bean.getOrderName().contentEquals("") || bean.getOrderName().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_NAME_NULL;
            }else if(!UserInputValidator.isAlphaNumericWithSpace(bean.getOrderName())) {
                isValidate = false;
                errorMessage = MessageVarList.INVALID_ORDER_NAME;
            } else if (bean.getFlatFee().contentEquals("") || bean.getFlatFee().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_FLAT_FEE_NULL;
            } else if (!UserInputValidator.isDecimal_Numeric(bean.getFlatFee())) {
                isValidate = false;
                errorMessage = MessageVarList.FLAT_FEE_DECIMAL_NUMERIC;
            }else if (bean.getFlatFeePercentage().contentEquals("") || bean.getFlatFeePercentage().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_FLAT_FEE_PECENTAGE_NULL;
            }else if (!UserInputValidator.isDecimal_Numeric(bean.getFlatFeePercentage())) {
                isValidate = false;
                errorMessage = MessageVarList.FLAT_FEE_PERCENTAGE_DECIMAL_NUMERIC;
            }else if (Double.parseDouble(bean.getFlatFeePercentage())>=1) {
                isValidate = false;
                errorMessage = MessageVarList.FLAT_FEE_PERCENTAGE_LESS_THAN_ONE;
            }else if (bean.getFeeOption()== null){
                isValidate = false;
                errorMessage = MessageVarList.FEE_OPTION_NULL;
            }else if (bean.getCurrencyType().contentEquals("")){
                isValidate = false;
                errorMessage = MessageVarList.CURRENCY_TYPE_NULL;
            }else if (bean.getMinTransactionAmt().contentEquals("") || bean.getMinTransactionAmt().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.MIN_TRANSACTION_AMOUNT_NULL;
            }else if (!UserInputValidator.isDecimal_Numeric(bean.getMinTransactionAmt())) {
                isValidate = false;
                errorMessage = MessageVarList.MIN_TRANSACTION_AMOUNT_DECIMAL_NUMERIC;
            }else if (bean.getMaxTransactionAmt().contentEquals("") || bean.getMaxTransactionAmt().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.MAX_TRANSACTION_AMOUNT_NULL;
            } else if (!UserInputValidator.isDecimal_Numeric(bean.getMaxTransactionAmt())) {
                isValidate = false;
                errorMessage = MessageVarList.MAX_TRANSACTION_AMOUNT_DECIMAL_NUMERIC;
            }else if (bean.getStatus().contentEquals("")) {
                isValidate = false;
                errorMessage = MessageVarList.STATUS_EMPTY;
            }else if (bean.getBankCode().contentEquals("")) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_BANK_NAME_NULL;
            }else if (bean.getBranchCode().contentEquals("")) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_BANK_BRANCH_NAME_NULL;
            }else if (bean.getAccNumber().contentEquals("") || bean.getAccNumber().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_ACC_NUMBER;
            }else if(!UserInputValidator.isAlphaNumeric(bean.getAccNumber())) {
                isValidate = false;
                errorMessage = MessageVarList.INVALID_ACC_NUMBER;
            } else if (bean.getPaymenyType().contentEquals("")) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_PAYMENT_TYPE_NULL;
            }else if (bean.getAddress1().contentEquals("") || bean.getAddress1().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_ADDRESS_NULL;
            }else if (bean.getCity().contentEquals("")) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_CITY_NULL;
            }else if (bean.getContactPerson().contentEquals("") || bean.getContactPerson().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_CONTACT_PERSON_NULL;
            }else if (!UserInputValidator.isAlpha(bean.getContactPerson())) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_CONTACT_PERSON_ALPHA;
            }else if (bean.getContactNumber().contentEquals("") || bean.getContactNumber().length() <= 0) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_CONTACT_PERSON_NUMBER_NULL;
            }else if (!UserInputValidator.isPhoneNumber(bean.getContactNumber())) {
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_CONTACT_PERSON_NUMBER_LENGHT;
            }else if(Double.parseDouble(bean.getMaxTransactionAmt())<Double.parseDouble(bean.getMinTransactionAmt())){
                isValidate = false;
                errorMessage = MessageVarList.STANDING_ORDER_MAX_MIN_TRANSACTION_AMT_DIFF_ERROR;
            }
                
        } catch (Exception ex) {
            isValidate = false;
            throw ex;
        }
        return isValidate;
    }
    
    /**
     * to insert new standing order record
     * @param bill
     * @return
     * @throws Exception 
     */
    public Boolean insertNewStandingOrderType(StandingOrderTypesBean bean) throws Exception {
        boolean success = false;
        
        standingOrderTypesManager = new StandingOrderTypesManager();
        success = standingOrderTypesManager.insertNewStandingOrderType(bean,systemAuditBean);
       
        return success;
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    /**
     * to retrieve all standing order types data
     * @throws Exception 
     */
    private void getAllStandingOrderData() throws Exception {
        try {
            standingOrderTypesManager = new StandingOrderTypesManager();
            standingOrderList = standingOrderTypesManager.getAllStandingOrderData();

        } catch (Exception ex) {
            throw ex;
        }
    }
    /**
     * to set values to the audit trace
     * @param request
     * @throws Exception 
     */
    private void setAudittraceValue(HttpServletRequest request) throws Exception {

        try {
            systemAuditBean = new SystemAuditBean();
            ////get unique Id from the page.It may be the primary key---------------
            String uniqueId = request.getParameter(standingOrderTypesBean.getOrderID());

            systemAuditBean.setUserRoleCode(sessionVarlist.getCMSSessionUser().getUserRole());
            systemAuditBean.setUserName(sessionVarlist.getCMSSessionUser().getUserName());
            //set unique id
            systemAuditBean.setUniqueId(uniqueId);
            //set description 
            systemAuditBean.setDescription("Add standing order type. Standing order ID: '" + standingOrderTypesBean.getOrderID() + "' by: " + sessionVarlist.getCMSSessionUser().getUserName());
            systemAuditBean.setApplicationCode(ApplicationVarList.ADMINISTRATION_APPLICATION);
            systemAuditBean.setSectionCode(SectionVarList.SYSTEMCONFIGMANAGEMENT);
            systemAuditBean.setPageCode(PageVarList.STANDING_ORDER_TYPES);
            systemAuditBean.setTaskCode(TaskVarList.ADD);
            systemAuditBean.setIp(request.getRemoteAddr());
            //add remarks here
            systemAuditBean.setRemarks(uniqueId);
            //set field name which is being changed(only if)
            systemAuditBean.setFieldName("");
            //set old value of change if required
            systemAuditBean.setOldValue("");
            //set new value of change if required
            systemAuditBean.setNewValue("");


            systemAuditBean.setLastUpdateduser(sessionVarlist.getCMSSessionUser().getUserName());

        } catch (Exception ex) {
            throw ex;
        }
    }
}
