/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.epic.cms.callcenter.callcentersearch.servlet;

import com.epic.cms.admin.controlpanel.sysusermgt.bean.PageBean;
import com.epic.cms.admin.controlpanel.sysusermgt.bean.SectionBean;
import com.epic.cms.admin.controlpanel.sysusermgt.businesslogic.SystemUserManager;
import com.epic.cms.callcenter.callcentersearch.bean.CustomerSearchBean;
import com.epic.cms.callcenter.callcentersearch.bean.ViewDataBean;
import com.epic.cms.callcenter.callcentersearch.businesslogic.CallCenterMgtManager;
import com.epic.cms.system.util.exception.AccessDeniedException;
import com.epic.cms.system.util.exception.NewLoginSessionException;
import com.epic.cms.system.util.exception.SesssionExpException;
import com.epic.cms.system.util.session.SessionUser;
import com.epic.cms.system.util.session.SessionVarList;
import com.epic.cms.system.util.session.SessionVarName;
import com.epic.cms.system.util.variable.MessageVarList;
import com.epic.cms.system.util.variable.OracleMessage;
import com.epic.cms.system.util.variable.PageVarList;
import com.epic.cms.system.util.variable.TaskVarList;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 *
 * @author badrika
 */
public class ViewCustomerMgtServlet extends HttpServlet {

    private SystemUserManager systemUserManager;
    private SessionVarList sessionVarlist;
    private SessionUser sessionUser;
    private List<String> userTaskList;
    private String url = "/callcenter/callcentersearch/customersearchadvancedview.jsp";
    private RequestDispatcher rd;
    private CallCenterMgtManager callCenterMgtManager;
    private CustomerSearchBean searchbean;
    private List<ViewDataBean> appList, cusList, accList, cardList;//viewlist
    private ViewDataBean cardBean, cusBean, accBean, appBean;
    private Map<SectionBean, List<PageBean>> sectionPageList;
    //private String applicationType;

    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {

            HttpSession sessionObj = request.getSession(false);
            
            String applicationType="ISCUSE";
            String section = request.getParameter("section");

            try {
                systemUserManager = new SystemUserManager();
                sessionVarlist = (SessionVarList) sessionObj.getAttribute(SessionVarName.SESSION_OBJ);
                sessionUser = sessionVarlist.getCMSSessionUser();

                this.getSectionPage(sessionUser.getUserRole(), applicationType, section);
                sessionUser.setSectionPageList(sectionPageList);
                sessionVarlist.setCMSSessionUser(sessionUser);

                try {

                    if (!systemUserManager.validateUserSession(sessionUser.getUserName(), sessionObj.getId())) {
                        throw new NewLoginSessionException();
                    }
                } catch (NewLoginSessionException nlex) {
                    throw new NewLoginSessionException();
                }

                try {
                    String pageCode = PageVarList.CALLCENTERSEARCH;
                    String taskCode = TaskVarList.ACCESSPAGE;
                    if (this.isValidAccess(sessionUser.getUserRole(), pageCode, taskCode)) {
                    } else {
                        throw new AccessDeniedException();
                    }

                    sessionVarlist.setUserPageTaskList(userTaskList);

                } catch (AccessDeniedException adex) {
                    throw adex;
                }

            } catch (NullPointerException ex) {
                throw new SesssionExpException();
            }

            /////////////////
            
            String viewId = request.getParameter("id");
           // sessionVarlist.setCardNumber(viewId1);
            
          //  String viewId=sessionVarlist.getCardNumber();

            searchbean = sessionVarlist.getCustomerSearchBean();
            this.searchCustomer();

            for (ViewDataBean CMSViewDataBean : cardList) {
                if (CMSViewDataBean.getCardNumber().equals(viewId)) {
                    cardBean = CMSViewDataBean;
                    sessionVarlist.setCardNumber(viewId);
                }
            }
            for (ViewDataBean CMSViewDataBean : cusList) {
                if (CMSViewDataBean.getCustmerIdCC().equals(viewId)) {
                    cusBean = CMSViewDataBean;
                    sessionVarlist.setCustomerId(viewId);
                }
            }
            for (ViewDataBean CMSViewDataBean : accList) {
                if (CMSViewDataBean.getAccountNoCA().equals(viewId)) {
                    accBean = CMSViewDataBean;
                    sessionVarlist.setAccountId(viewId);
                }
            }
            for (ViewDataBean CMSViewDataBean : appList) {
                if (CMSViewDataBean.getAppId().equals(viewId)) {
                    appBean = CMSViewDataBean;
                    sessionVarlist.setApplicationId(viewId);
                }
            }




            if (section.equals("CCCARD") && cardBean != null) {

                request.setAttribute("operationtype", "cardView");
                request.setAttribute("cardBean", cardBean);
                sessionVarlist.setCardNumber(cardBean.getCardNumber());
            } else if (section.equals("CCCUST") && cusBean != null) {

                request.setAttribute("operationtype", "cusView");
                request.setAttribute("cusBean", cusBean);
            } else if (section.equals("CCACCO") && accBean != null) {

                request.setAttribute("operationtype", "accView");
                request.setAttribute("accBean", accBean);
            } else if (section.equals("CCAPPL") && appBean != null) {

                request.setAttribute("operationtype", "appView");
                request.setAttribute("appBean", appBean);
            }


            rd = getServletContext().getRequestDispatcher(url);

            /////////////

        } catch (SesssionExpException sex) {
            rd = getServletContext().getRequestDispatcher(MessageVarList.SESSION_EXPIRED_URL + MessageVarList.SESSION_EXPIRED);
        } catch (NewLoginSessionException nlex) {
            rd = getServletContext().getRequestDispatcher(MessageVarList.SESSION_EXPIRED_URL + MessageVarList.LAST_SESSION_CLOSE);
        } catch (AccessDeniedException adex) {
            rd = getServletContext().getRequestDispatcher(MessageVarList.SESSION_EXPIRED_URL + MessageVarList.ACCESS_DENIED_TASK);
            //rd.forward(request, response);
        } catch (SQLException ex) {
            request.setAttribute(MessageVarList.JSP_ERROR, OracleMessage.getMessege(ex.getMessage()));
            rd = request.getRequestDispatcher(url);
        } catch (Exception ex) {
            request.setAttribute(MessageVarList.JSP_ERROR, MessageVarList.UNKNOW_ERROR);
            rd = request.getRequestDispatcher(url);
        } finally {
            rd.forward(request, response);
            out.close();
        }
    }

    private boolean isValidAccess(String userrole, String pagecode, String task) throws Exception {

        boolean isValidTaskAccess = false;

        try {
            systemUserManager = new SystemUserManager();
            userTaskList = systemUserManager.getTasksByPageCodeAndUserRole(userrole, pagecode);

            for (String usertask : userTaskList) {

                if (task.equals(usertask)) {
                    isValidTaskAccess = true;
                }
            }
            return isValidTaskAccess;
        } catch (Exception ex) {
            throw ex;
        }

    }

    private void searchCustomer() throws Exception {
        try {

            callCenterMgtManager = new CallCenterMgtManager();
            appList = callCenterMgtManager.searchApplication(searchbean);
            cusList = callCenterMgtManager.searchCustomer(searchbean);
            accList = callCenterMgtManager.searchAccount(searchbean);
            cardList = callCenterMgtManager.searchCard(searchbean);


        } catch (Exception e) {
            throw e;
        }
    }

    private Map<SectionBean, List<PageBean>> getSectionPage(String userRole, String applicationType, String sectionCode) throws Exception {

        callCenterMgtManager = new CallCenterMgtManager();
        //userManager = new SystemUserManager();
        sectionPageList = callCenterMgtManager.getSectionPage(userRole, applicationType, sectionCode);
        //sectionPageList = userManager.getSectionPage(userRole, applicationType);
        return sectionPageList;
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
